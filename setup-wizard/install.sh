#!/bin/bash

# ThoughtPilot Commercial Installation Script
# Version: 1.4.1
# Description: Interactive installation wizard for ThoughtPilot

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_TEMPLATES_DIR="$PROJECT_ROOT/config-templates"
INSTALL_LOG="$PROJECT_ROOT/install.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$INSTALL_LOG"
}

# Print banner
print_banner() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    ThoughtPilot Installer                    ║"
    echo "║                        Version 1.4.1                        ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if running as root (optional)
    if [[ $EUID -eq 0 ]]; then
        log "Warning: Running as root. Consider running as regular user."
    fi
    
    # Check required commands
    local required_commands=("python3" "node" "npm" "git")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log "Error: $cmd is required but not installed."
            exit 1
        fi
    done
    
    # Check disk space
    local required_space=1000000  # 1GB in KB
    local available_space=$(df . | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt "$required_space" ]; then
        log "Error: Insufficient disk space. Need at least 1GB available."
        exit 1
    fi
    
    log "Prerequisites check passed."
}

# Interactive configuration
configure_installation() {
    log "Starting interactive configuration..."
    
    echo -e "${YELLOW}Please provide the following configuration details:${NC}"
    
    # Slack configuration
    echo -e "\n${BLUE}Slack Configuration:${NC}"
    read -p "Slack Bot Token (xoxb-...): " SLACK_BOT_TOKEN
    read -p "Slack Signing Secret: " SLACK_SIGNING_SECRET
    read -p "Slack App Token (xapp-...): " SLACK_APP_TOKEN
    
    # Database configuration
    echo -e "\n${BLUE}Database Configuration:${NC}"
    read -p "Database URL (postgresql://...): " DATABASE_URL
    read -p "Redis URL (redis://...): " REDIS_URL
    
    # Server configuration
    echo -e "\n${BLUE}Server Configuration:${NC}"
    read -p "Port (default: 3000): " PORT
    PORT=${PORT:-3000}
    read -p "Host (default: 0.0.0.0): " HOST
    HOST=${HOST:-0.0.0.0}
    
    # Environment
    echo -e "\n${BLUE}Environment:${NC}"
    read -p "Environment (development/production): " NODE_ENV
    NODE_ENV=${NODE_ENV:-production}
    
    # Save configuration
    save_configuration
}

# Save configuration to .env file
save_configuration() {
    log "Saving configuration..."
    
    local env_file="$PROJECT_ROOT/.env"
    
    cat > "$env_file" << EOF
# ThoughtPilot Environment Configuration
# Generated by installer on $(date)

# Slack Configuration
SLACK_BOT_TOKEN=$SLACK_BOT_TOKEN
SLACK_SIGNING_SECRET=$SLACK_SIGNING_SECRET
SLACK_APP_TOKEN=$SLACK_APP_TOKEN

# Database Configuration
DATABASE_URL=$DATABASE_URL
REDIS_URL=$REDIS_URL

# Server Configuration
PORT=$PORT
HOST=$HOST
NODE_ENV=$NODE_ENV

# Security Configuration
JWT_SECRET=$(openssl rand -hex 32)
SESSION_SECRET=$(openssl rand -hex 32)

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=/var/log/thoughtpilot/app.log

# Monitoring Configuration
MONITORING_ENABLED=true
HEALTH_CHECK_INTERVAL=30

# Development Configuration
DEBUG_MODE=false
DEV_MODE=false
EOF
    
    log "Configuration saved to $env_file"
}

# Install dependencies
install_dependencies() {
    log "Installing dependencies..."
    
    # Install Python dependencies
    if [ -f "$PROJECT_ROOT/requirements.txt" ]; then
        log "Installing Python dependencies..."
        pip3 install -r "$PROJECT_ROOT/requirements.txt"
    fi
    
    # Install Node.js dependencies
    if [ -f "$PROJECT_ROOT/package.json" ]; then
        log "Installing Node.js dependencies..."
        npm install
    fi
    
    log "Dependencies installed successfully."
}

# Setup configuration files
setup_configuration() {
    log "Setting up configuration files..."
    
    # Copy configuration templates
    if [ -d "$CONFIG_TEMPLATES_DIR" ]; then
        log "Copying configuration templates..."
        
        # Copy main config
        if [ -f "$CONFIG_TEMPLATES_DIR/config.json.template" ]; then
            cp "$CONFIG_TEMPLATES_DIR/config.json.template" "$PROJECT_ROOT/config.json"
        fi
        
        # Copy ecosystem config
        if [ -f "$CONFIG_TEMPLATES_DIR/ecosystem.config.js.template" ]; then
            cp "$CONFIG_TEMPLATES_DIR/ecosystem.config.js.template" "$PROJECT_ROOT/ecosystem.config.js"
        fi
        
        # Copy Redis config
        if [ -f "$CONFIG_TEMPLATES_DIR/redis.conf.template" ]; then
            cp "$CONFIG_TEMPLATES_DIR/redis.conf.template" "$PROJECT_ROOT/redis.conf"
        fi
        
        log "Configuration files set up successfully."
    else
        log "Warning: Configuration templates directory not found."
    fi
}

# Validate installation
validate_installation() {
    log "Validating installation..."
    
    # Check if .env file exists
    if [ ! -f "$PROJECT_ROOT/.env" ]; then
        log "Error: .env file not found."
        return 1
    fi
    
    # Check if configuration files exist
    local required_files=("config.json" "ecosystem.config.js")
    for file in "${required_files[@]}"; do
        if [ ! -f "$PROJECT_ROOT/$file" ]; then
            log "Warning: $file not found."
        fi
    done
    
    # Test Python import
    if python3 -c "import gpt_cursor_runner" 2>/dev/null; then
        log "Python module import test passed."
    else
        log "Warning: Python module import test failed."
    fi
    
    # Test Node.js package
    if node -e "console.log('Node.js test passed')" 2>/dev/null; then
        log "Node.js test passed."
    else
        log "Warning: Node.js test failed."
    fi
    
    log "Installation validation completed."
}

# Main installation function
main() {
    print_banner
    
    log "Starting ThoughtPilot installation..."
    
    # Check prerequisites
    check_prerequisites
    
    # Interactive configuration
    configure_installation
    
    # Install dependencies
    install_dependencies
    
    # Setup configuration
    setup_configuration
    
    # Validate installation
    validate_installation
    
    # Final message
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                    Installation Complete!                    ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo -e "\n${YELLOW}Next steps:${NC}"
    echo -e "1. Review configuration in $PROJECT_ROOT/.env"
    echo -e "2. Run: ./setup-wizard/start.sh"
    echo -e "3. Check status: ./setup-wizard/status.sh"
    echo -e "4. View logs: ./setup-wizard/logs.sh"
    echo -e "\n${BLUE}For support, visit: https://thoughtpilot.example.com/support${NC}"
    
    log "Installation completed successfully."
}

# Run main function
main "$@" 